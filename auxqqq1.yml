:
kubectl run hello-minikube --image=gcr.io/google_containers/echoserver:1.4 --port=8080
# Runs an image on the cluster, tags it as hello-minikube
kubectl expose deployment hello-minikube --type=NodePort
# Exposes the host machine
minikube service hello-minikube --url
# Returns the url in which the deployment has been exposed
kubectl get pod
# Get information about all running pods
kubectl describe pod <podname>
# Describes 1 pod
kubectl expose pod <podname> --port=444 --name=frontend
# Expose the port of a pod (creates a new service)
kubectl port-forward <podname> 8080
# Port forward the exposed pod port to your local machine (kind of like docker mirroring)
kubectl attach <podname> -i
# Attaches to the pod
kubectl exec <podname> -- command
# Executes a command on the pod, recheck spacing
kubectl label pods <podname> mylabel=test
# Labels a pod
kubectl run -i --tty busybox --image=busybox --restart=Never -- sh
# Run a shell in a pod - very useful for debugging
kubectl get deployments
# Get information on current deployments
kubectl get rs
# Get information about replica sets
kubectl get pods --show-labels
# Get pods and also show labels attached to those pods
kubectl rollout status deployment/name-deployment
# Get deployment status
kubectl set image deployment/name-deployment k8s-demo=k8s-demo:2
# Runs k8s-demo with the image label version 2
kubectl edit deployment/name-deployment
# Edit the deployment object
kubectl rollout status deployment/name-deployment
# Get the status of the rollout
kubectl rollout history deployment/name-deployment
# Get the rollout history
kubectl rollout undo deployment/name-deployment
# Rollback to previous version
kubectl rollout status deployment/name-deployment --to-revision=n
# Rollback to n version

# By default services can only run between ports 30000-32767 
# This behaviour can be changed by adding the --service-node-port-range= argument to the kube-apiserver (in the init scripts)

Secrets:

echo -n "user" > ./user.txt
echo -n "pw" > ./pw.txt
kubectl create secret generic db-user-pw --from-file=./user.txt --from-file=./pw.txt
# Creates a secret called db-user-pw from 2 files

kubectl create secret generic ssl-certificate --from-file=ssh-privatekey=~/.ssh/id_rsa --ssl-cert-=ssl-cert=mysslcert.crt
# Creates a SSH key or a SSL certificate